<Statement>	->	<Declarative>
<Declarative>	->	<TYPE> id <MoreIds>;
<TYPE>	->	int
Token: KEYWORD		Lexeme: int

Token: id		Lexeme: num

<MoreIds>	->	, id <MoreIds>
Token: SEP		Lexeme: ,

Token: id		Lexeme: num2

<MoreIds>	->	, id <MoreIds>
Token: SEP		Lexeme: ,

Token: id		Lexeme: large$

Token: SEP		Lexeme: ;

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

<Statement>	->	<Assignment>
<Assignment>	->	id = <Expression>;
Token: id		Lexeme: num

Token: OPERATOR		Lexeme: =

<Expression>	->	<Term> <ExpressionPrime>
<Term>		->	<Factor> <TermPrime>
<Factor>	->	integer
Token: INTEGER		Lexeme: 0

Token: SEP		Lexeme: ;

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

<Statement>	->	<Assignment>
<Assignment>	->	id = <Expression>;
Token: id		Lexeme: num2

Token: OPERATOR		Lexeme: =

<Expression>	->	<Term> <ExpressionPrime>
<Term>		->	<Factor> <TermPrime>
<Factor>	->	integer
Token: INTEGER		Lexeme: 15

Token: SEP		Lexeme: ;

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

<Statement>	->	<Declarative>
<Declarative>	->	<TYPE> id <MoreIds>;
<TYPE>	->	boolean
Token: KEYWORD		Lexeme: boolean

Token: id		Lexeme: hey

Token: SEP		Lexeme: ;

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

<Statement>	->	<Assignment>
<Assignment>	->	id = <Expression>;
Token: id		Lexeme: hey

Token: OPERATOR		Lexeme: =

<Expression>	->	<Term> <ExpressionPrime>
<Term>		->	<Factor> <TermPrime>
<Factor>	->	bool
Token: KEYWORD		Lexeme: true

Token: SEP		Lexeme: ;

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

<Statement>	->	<Assignment>
<Assignment>	->	id = <Expression>;
Token: id		Lexeme: hey

Token: OPERATOR		Lexeme: =

<Expression>	->	<Term> <ExpressionPrime>
<Term>		->	<Factor> <TermPrime>
<Factor>	->	bool
Token: KEYWORD		Lexeme: false

Token: SEP		Lexeme: ;

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

<Statement>	->	if ( <Conditional> )
Token: KEYWORD		Lexeme: if

Token: SEP		Lexeme: (

<Conditional>	->	<Expression> <Relational> <Expression>
<Expression>	->	<Term> <ExpressionPrime>
<Term>		->	<Factor> <TermPrime>
<Factor>	->	id
Token: id		Lexeme: num2

<Relational>	->	>
Token: OPERATOR		Lexeme: >

<Expression>	->	<Term> <ExpressionPrime>
<Term>		->	<Factor> <TermPrime>
<Factor>	->	id
Token: id		Lexeme: num

Token: SEP		Lexeme: )

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

<Statement>	->	{
Token: SEP		Lexeme: {

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

<Statement>	->	<Assignment>
<Assignment>	->	id = <Expression>;
Token: id		Lexeme: large$

Token: OPERATOR		Lexeme: =

<Expression>	->	<Term> <ExpressionPrime>
<Term>		->	<Factor> <TermPrime>
<Factor>	->	id
Token: id		Lexeme: num

Token: SEP		Lexeme: ;

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

<Statement>	->	}
Token: SEP		Lexeme: }

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

<Statement>	->	else
Token: KEYWORD		Lexeme: else

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

<Statement>	->	{
Token: SEP		Lexeme: {

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

<Statement>	->	<Assignment>
<Assignment>	->	id = <Expression>;
Token: id		Lexeme: large$

Token: OPERATOR		Lexeme: =

<Expression>	->	<Term> <ExpressionPrime>
<Term>		->	<Factor> <TermPrime>
<Factor>	->	id
Token: id		Lexeme: num2

Token: SEP		Lexeme: ;

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

<Statement>	->	}
Token: SEP		Lexeme: }

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

<Statement>	->	endif
Token: KEYWORD		Lexeme: endif

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

<Statement>	->	while <Expression> { <Statement> }
Token: KEYWORD		Lexeme: while

Token: SEP		Lexeme: (

<Conditional>	->	<Expression> <Relational> <Expression>
<Expression>	->	<Term> <ExpressionPrime>
<Term>		->	<Factor> <TermPrime>
<Factor>	->	id
Token: id		Lexeme: hey

Token: SEP		Lexeme: )

Token: SEP		Lexeme: {

<Statement>	->	<Assignment>
<Assignment>	->	id = <Expression>;
Token: id		Lexeme: large$

Token: OPERATOR		Lexeme: =

<Expression>	->	<Term> <ExpressionPrime>
<Term>		->	<Factor> <TermPrime>
<Factor>	->	id
Token: id		Lexeme: num2

Token: SEP		Lexeme: ;

Token: SEP		Lexeme: }

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

